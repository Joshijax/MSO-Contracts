{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ERC20TransferFailed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "InsufficientPermission",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "assetTip",
						"type": "uint256"
					}
				],
				"name": "ERC1155Registered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "assetId",
						"type": "uint256"
					}
				],
				"name": "ERC20Registered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "assetTip",
						"type": "uint256"
					}
				],
				"name": "ERC721Registered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "assetTip",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalSupply",
						"type": "uint256"
					}
				],
				"name": "FungibleAssetCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "assetTip",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalSupply",
						"type": "uint256"
					}
				],
				"name": "NonFungibleAssetCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "assetTip",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "assetId",
						"type": "uint256"
					}
				],
				"name": "NonFungibleAssetMinted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "OperatorSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "assetTip",
						"type": "uint256"
					}
				],
				"name": "assetMetadatas",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"internalType": "enum AssetType",
						"name": "assetType",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "ts",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "mintTo",
						"type": "address"
					}
				],
				"name": "createFungibleAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "ts",
						"type": "uint256"
					}
				],
				"name": "createNonFungibleAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "assetTip",
						"type": "uint256"
					}
				],
				"name": "creatorOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "originalTokenId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isFungible",
						"type": "bool"
					}
				],
				"name": "getWrappedAssetId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "assetId",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "isOperator",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "assetTip",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "tokenURI_",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "mintNonFungibleAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextTip",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "originalTokenIds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "originalTokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "assetId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "originalTokenId",
						"type": "uint256"
					}
				],
				"name": "registerERC1155",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "registerERC20",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "originalTokenId",
						"type": "uint256"
					}
				],
				"name": "registerERC721",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "supported",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "assetId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "tokenURI",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "originalTokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unwrapERC1155",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unwrapERC20",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "originalTokenId",
						"type": "uint256"
					}
				],
				"name": "unwrapERC721",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "originalTokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "wrapERC1155",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "wrapERC20",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "originalTokenId",
						"type": "uint256"
					}
				],
				"name": "wrapERC721",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "assetId",
						"type": "uint256"
					}
				],
				"name": "wrapperRegistry",
				"outputs": [
					{
						"internalType": "bool",
						"name": "canWrap",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"InsufficientBalance(address,uint256)": [
					{
						"details": "Thrown when owner balance for id is insufficient.",
						"params": {
							"id": "The id of the token.",
							"owner": "The address of the owner."
						}
					}
				],
				"InsufficientPermission(address,uint256)": [
					{
						"details": "Thrown when spender allowance for id is insufficient.",
						"params": {
							"id": "The id of the token.",
							"spender": "The address of the spender."
						}
					}
				]
			},
			"events": {
				"Approval(address,address,uint256,uint256)": {
					"params": {
						"amount": "The amount of the token.",
						"id": "The id of the token.",
						"owner": "The address of the owner.",
						"spender": "The address of the spender."
					}
				},
				"OperatorSet(address,address,bool)": {
					"params": {
						"approved": "The approval status.",
						"owner": "The address of the owner.",
						"spender": "The address of the spender."
					}
				},
				"Transfer(address,address,uint256,uint256)": {
					"params": {
						"amount": "The amount of the token.",
						"id": "The id of the token.",
						"receiver": "The address of the receiver.",
						"sender": "The address of the sender."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"approve(address,uint256,uint256)": {
					"params": {
						"amount": "The amount of the token.",
						"id": "The id of the token.",
						"spender": "The address of the spender."
					}
				},
				"createFungibleAsset(string,string,uint256,address)": {
					"params": {
						"mintTo": "the proposed account to hold token supply.",
						"name": "The name of the asset.",
						"symbol": "The token symbol.",
						"ts": "the proposed total supply of the token."
					}
				},
				"createNonFungibleAsset(string,string,uint256)": {
					"params": {
						"name": "The name of the asset.",
						"symbol": "The token symbol.",
						"ts": "the proposed total supply of the token."
					}
				},
				"getWrappedAssetId(address,uint256,bool)": {
					"params": {
						"originalTokenId": "The token id. if fungible, the passed value will be ignored",
						"token": "The token contract."
					}
				},
				"mintNonFungibleAsset(uint256,uint256,string,address)": {
					"params": {
						"assetTip": "The NFT asset identifier.",
						"to": "The recipient account.",
						"tokenId": "The NFT to be minted.",
						"tokenURI_": "The token URI for metadata."
					}
				},
				"registerERC1155(address,uint256)": {
					"params": {
						"originalTokenId": "The NFT id.",
						"token": "The NFT contract."
					}
				},
				"registerERC20(address)": {
					"params": {
						"token": "The NFT contract."
					}
				},
				"registerERC721(address,uint256)": {
					"params": {
						"originalTokenId": "The NFT id.",
						"token": "The NFT contract."
					}
				},
				"setOperator(address,bool)": {
					"params": {
						"approved": "The approval status.",
						"spender": "The address of the spender."
					}
				},
				"supportsInterface(bytes4)": {
					"params": {
						"interfaceId": "The interface identifier, as specified in ERC-165."
					},
					"returns": {
						"supported": "True if the contract implements `interfaceId` and"
					}
				},
				"transfer(address,uint256,uint256)": {
					"params": {
						"amount": "The amount of the token.",
						"id": "The id of the token.",
						"receiver": "The address of the receiver."
					}
				},
				"transferFrom(address,address,uint256,uint256)": {
					"params": {
						"amount": "The amount of the token.",
						"id": "The id of the token.",
						"receiver": "The address of the receiver.",
						"sender": "The address of the sender."
					}
				},
				"unwrapERC1155(address,uint256,uint256)": {
					"params": {
						"originalTokenId": "The NFT id to be unwrapped from the contract.",
						"token": "The NFT contract."
					}
				},
				"unwrapERC20(address,uint256)": {
					"params": {
						"amount": "The amount of tokens to be unwrapped",
						"token": "The NFT contract."
					}
				},
				"unwrapERC721(address,uint256)": {
					"params": {
						"originalTokenId": "The NFT id to be unwrapped from the contract.",
						"token": "The NFT contract."
					}
				},
				"wrapERC1155(address,uint256,uint256)": {
					"params": {
						"originalTokenId": "The NFT id to be wrapped from the contract.",
						"token": "The NFT contract."
					}
				},
				"wrapERC20(address,uint256)": {
					"params": {
						"amount": "The amount of tokens to be wrapped",
						"token": "The NFT contract."
					}
				},
				"wrapERC721(address,uint256)": {
					"params": {
						"originalTokenId": "The NFT id to be wrapped from the contract.",
						"token": "The NFT contract."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"Approval(address,address,uint256,uint256)": {
					"notice": "The event emitted when an approval occurs."
				},
				"OperatorSet(address,address,bool)": {
					"notice": "The event emitted when an operator is set."
				},
				"Transfer(address,address,uint256,uint256)": {
					"notice": "The event emitted when a transfer occurs."
				}
			},
			"kind": "user",
			"methods": {
				"allowance(address,address,uint256)": {
					"notice": "Spender allowance of an id."
				},
				"approve(address,uint256,uint256)": {
					"notice": "Approves an amount of an id to a spender."
				},
				"balanceOf(address,uint256)": {
					"notice": "Owner balance of an id."
				},
				"createFungibleAsset(string,string,uint256,address)": {
					"notice": "Creates a fungible asset."
				},
				"createNonFungibleAsset(string,string,uint256)": {
					"notice": "Creates an NFT asset."
				},
				"getWrappedAssetId(address,uint256,bool)": {
					"notice": "Gets the local identifier of a wrapped token."
				},
				"isOperator(address,address)": {
					"notice": "Checks if a spender is approved by an owner as an operator."
				},
				"mintNonFungibleAsset(uint256,uint256,string,address)": {
					"notice": "Mints a Nonfungible asset. This is left the the Implementing contract to override"
				},
				"registerERC1155(address,uint256)": {
					"notice": "Registers ERC20 token for wrapping."
				},
				"registerERC20(address)": {
					"notice": "Registers ERC20 token for wrapping."
				},
				"registerERC721(address,uint256)": {
					"notice": "Registers ERC20 token for wrapping."
				},
				"setOperator(address,bool)": {
					"notice": "Sets or unsets a spender as an operator for the caller."
				},
				"supportsInterface(bytes4)": {
					"notice": "Checks if a contract implements an interface."
				},
				"totalSupply(uint256)": {
					"notice": "The total supply of each id."
				},
				"transfer(address,uint256,uint256)": {
					"notice": "Transfers an amount of an id from the caller to a receiver."
				},
				"transferFrom(address,address,uint256,uint256)": {
					"notice": "Transfers an amount of an id from a sender to a receiver."
				},
				"unwrapERC1155(address,uint256,uint256)": {
					"notice": "unwraps an ERC721 token."
				},
				"unwrapERC20(address,uint256)": {
					"notice": "Unwraps an ERC20 token."
				},
				"unwrapERC721(address,uint256)": {
					"notice": "unwraps an ERC721 token."
				},
				"wrapERC1155(address,uint256,uint256)": {
					"notice": "Wraps an ERC1155 token."
				},
				"wrapERC20(address,uint256)": {
					"notice": "Wraps an ERC20 token."
				},
				"wrapERC721(address,uint256)": {
					"notice": "Wraps an ERC721 token."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/UniversalTokenContract.sol": "UTC"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
			"keccak256": "0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce",
			"license": "MIT",
			"urls": [
				"bzz-raw://ecf8c7ed1f8ff443c181f64496ae380ee02e61dcd2ed120e1e997837a926f182",
				"dweb:/ipfs/QmWASYTrZPF2MrcpC3EBmxx6RgtZ5Fr4jwrsmB7ZF7qhDC"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://25addbda49a578b3318130585601344c5149a5549d749adf88e9685349a46b23",
				"dweb:/ipfs/Qme2DuD8gpsve1ZvaSMQpBwMdpU7yAtekDwr7gUp8dX4zX"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
			"keccak256": "0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68",
			"license": "MIT",
			"urls": [
				"bzz-raw://280e17738a67b06dae02fec32982bd48a8ab71d8df95e9975ae03532634bc522",
				"dweb:/ipfs/QmecjsNcFgy2mMjuNfRDkLpAYMRWnh5o73fw1Bj2rCso2z"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
			"keccak256": "0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb",
			"license": "MIT",
			"urls": [
				"bzz-raw://0808de0ae4918c664643c885ca7fa6503e8ef2bd75609dfc85152c0128a3422d",
				"dweb:/ipfs/QmNrhFC1XgBKuuxfahFeiwi1MCdu3FLNpHj2uStgmf4iJj"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
				"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
				"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02",
				"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
			"license": "MIT",
			"urls": [
				"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
				"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"contracts/ERC6909.sol": {
			"keccak256": "0xd259904c5b4b4ad3604559b7d893f16e72d71404811588121cadba204f52f30d",
			"license": "MIT",
			"urls": [
				"bzz-raw://36f41cbd374d9dd0bef861c4ce52453bbebdc4281763f79caaf3c737e8f5e8ca",
				"dweb:/ipfs/QmbQiSTXVU6SyZcRC3PBZpBg49c8WtAUKE8JNCSsQKmyb9"
			]
		},
		"contracts/IERC6909.sol": {
			"keccak256": "0x26affd11837ef75d256e18d9df931281cec061b4bc06be3d77da3c347442c2fd",
			"license": "MIT",
			"urls": [
				"bzz-raw://b8acb575710cc587ba6c9cf5e21d260104055bd6ec58e200011bc2caaf76ae3e",
				"dweb:/ipfs/QmR4oizruSqaM2E7qjb1hEe5L7k36TcUZ7dVGPt7ASU3rj"
			]
		},
		"contracts/UniversalTokenContract.sol": {
			"keccak256": "0xa1a2a5597eec0282d6445f72a0d853a1cd0256890f71b9623790f9da9c2626ac",
			"license": "MIT",
			"urls": [
				"bzz-raw://f2fd48ef0b0ac3f5831bae5080668cac892cbeb6420240372d7a564f195f2d6c",
				"dweb:/ipfs/QmSL39VsudK7TLD5sd5RcqXNDiN96W6bP7kD4D5LwX8EyM"
			]
		}
	},
	"version": 1
}